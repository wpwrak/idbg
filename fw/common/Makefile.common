CC=sdcc
CFLAGS=-I. -I../common \
       -DPAYLOAD_START=$(PAYLOAD_START) -DPAYLOAD_SIZE=$(PAYLOAD_SIZE)
LDFLAGS=--xram-size 1024


CPP := $(CPP)	# make sure changing CC won't affect CPP

CC_normal	:= $(CC)
CC_quiet	= @echo "  CC       " $@ && $(CC_normal)
GEN_quiet	= @echo "  GENERATE " $@ &&

ifeq ($(V),1)
    CC		= $(CC_normal)
    GEN		=
else
    CC		= $(CC_quiet)
    GEN		= $(GEN_quiet)
endif


.SUFFIXES:	.rel .ihx .bin

.PHONY:		clean spotless upload version

all:		$(MAIN).bin

version:
		@if [ -f .version ]; then \
		    v=`cat .version`; \
		    expr $$v + 1 >.version; \
		else \
		    echo 0 >.version; \
		fi
		@[ -s .version ] || echo 0 >.version
		@echo '#include "version.h"' >version.c
		@echo "const char *build_date = \"`date`\";" >>version.c
		@echo "const uint16_t build_number = `cat .version`;" \
		  >>version.c

version.rel:	version

$(MAIN).ihx:	$(OBJS:%=%.rel)
		$(GEN) $(CC_normal) $(CFLAGS) $(LDFLAGS) $(OBJS:%=%.rel)

.ihx.bin:
		$(GEN) objcopy -I ihex $< -O binary $@
		@echo "build #`cat .version`, `ls -l $@`"

.rel.ihx:
		$(CC) $(CFLAGS) $<

.c.rel:
		$(CC) $(CFLAGS) -c $<


depend:
		>.depend
		touch version.h
		for n in $(OBJS:%=%.c); do \
		    $(CPP) $(CFLAGS) -MM -MG \
		      `[ -f $$n ] || echo ../common/`$$n >>.depend || \
		      { rm -f .depend; exit 1; }; \
		done

ifeq (.depend,$(wildcard .depend))
include .depend
endif

clean:
		rm -f $(OBJS:%=%.rel) .depend
		rm -f $(OBJS:%=%.asm) $(OBJS:%=%.lst)
		rm -f $(OBJS:%=%.rst) $(OBJS:%=%.sym)
		rm -f $(MAIN).ihx $(MAIN).lnk $(MAIN).map $(MAIN).mem

spotless:	clean
		rm -f $(MAIN).bin

upload:
		ssh lab neo 'cat \>$(MAIN).bin' <$(MAIN).bin
